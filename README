PACKAGE

package passwordhash

Package passwordhash implements safe password hashing and comparison.

Passwords are derived using PBKDF2-HMAC-SHA256 function with 5000 iterations
(by default), 32-byte salt and 64-byte output.



CONSTANTS

const (
    // Default number of iterations for PBKDF2
    DefaultIterations = 5000
    // Default salt length
    SaltLen = 32
)


TYPES

type PasswordHash struct {
    Iter int
    Salt []byte
    Hash []byte
}

PasswordHash stores hash, salt, and number of iterations.

func New(password string) *PasswordHash

New returns a new password hash derived from the provided password,
a random salt, and the default number of iterations.

func NewIter(password string, iter int) *PasswordHash

NewIter returns a new password hash derived from the provided password,
the number of iterations, and a random salt.

func NewSaltIter(password string, salt []byte, iter int) *PasswordHash

NewSaltIter creates a new password hash from the provided password, salt,
and the number of iterations.

func (ph *PasswordHash) EqualToPassword(password string) bool

EqualToPassword returns true if the password hash was derived from the provided password.
This function uses constant time comparison.

func (ph *PasswordHash) String() string

String returns a string representation of the password hash.

EXAMPLE

	ph := New("hello, world")
	// Store ph somewhere...
	// Later, when user provides a password:
	if ph.EqualToPassword("hello, world") {
		// Password's okay, user authorized...
	}


NOTES

Package requires http://github.com/dchest/pbkdf2.
